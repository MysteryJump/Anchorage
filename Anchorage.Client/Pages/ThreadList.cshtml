@page "/boards/{boardKey}"
@using Anchorage.Shared.Models
@using System.Timers
@inject HttpClient Http


@if (board == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <h1>Thread List : @board.BoardName</h1>
    <h6>&nbsp;<a href="/boards/">Back to Board List</a></h6>
    <table class="table">
        <thead>
            <tr>
                <th>Title</th>
                <th>Created</th>
                <th>Modified</th>
                <th>Response Count</th>
                <th>Influence</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var thread in board.Child)
            {
                <tr>
                    <td><a href="/boards/@thread.BoardKey/@thread.ThreadId">@thread.Title</a></td>
                    <td>@thread.Created</td>
                    <td>@thread.Modified</td>
                    <td>@thread.ResponseCount</td>
                    <td>@thread.Influence</td>
                </tr>
            }
        </tbody>
    </table>
    <div class="modal fade" id="modalRegisterForm" tabindex="-1" role="dialog" aria-labelledby="myModalLabel" aria-hidden="true">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header text-center">
                    <h4 class="modal-title w-100 font-weight-bold">Create Thread</h4>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body mx-3">
                    <div class="md-form mb-1">
                        <label for="title">Title:</label>
                        <input type="text" id="title" class="form-control" bind="@ThreadTitle" />
                    </div>
                    <div class="md-form mb-1">
                        <label for="name">Name:</label>
                        <input type="text" id="name" class="form-control" placeholder="@board.BoardDefaultName" bind="@Name" />
                    </div>
                    <div class="md-form mb-1">
                        <label for="mail">Mail:</label>
                        <input type="text" id="mail" class="form-control" placeholder="Optional" bind="@Mail" />
                    </div>
                    <div class="md-form mb-1">
                        <label for="body">Body:</label>
                        <textarea id="body" class="form-control" rows="6" bind="@Body"></textarea>
                    </div>
                </div>
                <div class="modal-footer d-flex justify-content-center">
                    <button class="btn btn-deep-orange" data-dismiss="modal" type="button" onclick="@(async () => await PostThread())">Submit</button>
                </div>
            </div>
        </div>
    </div>


    <button class="btn btn-default btn-rounded mb-4" data-toggle="modal" data-target="#modalRegisterForm">Create Thread</button>

}

@functions {
    private Board board { get; set; }

    [Parameter]
    private string BoardKey { get; set; }

    private string Body { get; set; }
    private string ThreadTitle { get; set; }
    private string Name { get; set; }
    private string Mail { get; set; }


    protected override async Task OnInitAsync()
    {
        await GetThreadsAsync();
        Globals.AutoReloadTimer = new Timer();
        Globals.AutoReloadTimer.Elapsed += async (e, args) => await GetThreadsAsync();
        Globals.AutoReloadTimer.Interval = 5000;
        Globals.AutoReloadTimer.Start();
        
    }

    private async Task PostThread()
    {
        var response = new ClientResponse()
        {
            Body = Body,
            Name = Name,
            Mail = Mail
        };

        var thread = new ClientThread();

        thread.Response = response;
        thread.Title = ThreadTitle;

        await Http.PostJsonAsync<ClientThread>($"api/boards/{BoardKey}", thread);


        await GetThreadsAsync();
    }

    private async Task GetThreadsAsync()
    {
        board = await Http.GetJsonAsync<Board>("api/boards/" + BoardKey);
        StateHasChanged();
    }
}

